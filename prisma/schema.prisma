generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model category {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String       @db.VarChar(255)
  organization_id String       @db.Uuid
  is_locked       Boolean?     @default(false)
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product         product[]
}

model organization {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?    @db.VarChar(255)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  category    category[]
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  outfit      outfit[]
}

model outfit {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String           @db.VarChar(255)
  organization_id String           @db.Uuid
  created_at      DateTime         @default(now()) @db.Timestamp(6)
  updated_at      DateTime         @default(now()) @db.Timestamp(6)
  organization    organization     @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  outfit_product  outfit_product[]
}

model outfit_product {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  outfit_id  String   @db.Uuid
  product_id String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  outfit     outfit   @relation(fields: [outfit_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product    product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model product {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String           @db.VarChar(255)
  category_id    String           @db.Uuid
  link           String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  outfit_product outfit_product[]
  category       category         @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  organization organization[]
}
